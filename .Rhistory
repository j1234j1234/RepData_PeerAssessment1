ibar(Sepal.Length)
iplot(Sepal.Length, Sepal.Width)
library(iplots)
install.packages("iplots")
library(iplots)
install.packages("rJava")
library(iplots)
attach(iris)
library(iplots)
attach(iris)
ipcp(iris)
ibar(Species)
ibar(Sepal.Length)
iplot(Sepal.Length, Sepal.Width)
?iplots
install.packages("iplots")
library(iplots)
library("rJava", lib.loc="C:/Users/Jon/Documents/R/win-library/3.0")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="C:/Users/Jon/Documents/R/win-library/3.0")
detach("package:rJava", unload=TRUE)
install.packages("rJava")
library(iplots)
attach(iris)
ipcp(iris)
ibar(Species)
ibar(Sepal.Length)
iplot(Sepal.Length, Sepal.Width)
library(iplots)
library("rJava", lib.loc="C:/Users/Jon/Documents/R/win-library/3.0")
install.packages("rJava")
library(rpart)
View(kyphosis)
fit <- rpart(Kyphosis ~ Age + Number + Start, method = "class", data = kyphosis)
printcp(fit)
plotcp(fit)
summary(fit)
fit
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE)
install.packages("randomForest")
library(randomFOrest)
library(randomForest)
library(randomForest)
fit <- randomForest(Kyphosis ~ Age + Number + Start, data = kyphosis)
fit
print(fit)
importance(fit)
fit
importance(fit)
varImpPlot(fit)
library(mass)
library(MASS)
install.packages("MASS")
library(MASS)
data(UScereal)
head(UScereal)
cereal.data - UScereal[, -c(1, 11)]
head(cereal.data)
cereal.data <- UScereal[, -c(1, 11)]
head(cereal.data)
cereal.data1 <- UScereal[, 2:10]
head(cereal.data1)
names(UScereal)
pairs(cereal.data, pch=20)
pca.object <- princomp(cereal.data)
summary(pca.object)
plot(pca.object)
?princomp
pca.object$loadings
pca.object2 <- princomp(cereal.data, cor=TRUE)
pca.object2 <- princomp(cereal.data, cor=TRUE)
pca.cors <- cor(cereal.data)
View(pca.cors)
summary(pca.object2)
plot(pca.object2)
pca.object2$loadings
pca.object2$loadings
pairs(pca.object2$loadings)
View(pca.object2$scores)
pairs(pca.object2$scores)
dim(pca.object$scores)
is.data.frame(pca.object$scores)
a <- as.data.frame(pca.object$scores)
pairs(a, pch=20)
pairs(a[, 1:5], pch=20)
dim(pca.object2$scores)
is.data.frame(pca.object2$scores)
a <- as.data.frame(pca.object2$scores)
pairs(a, pch=20)
pairs(a[, 1:5], pch=20)
heatmap(as.matrix(cereal.data))
heatmap(cor(cereal.data))
heatmap(pca.object$scores)
heatmap(cor(pca.object$scores)
heatmap(cor(pca.object$scores))
heatmap(pca.object2$scores)
heatmap(cor(pca.object2$scores))
heatmap(pca.object2$scores)
heatmap(cor(t(pca.object2$scores)))
install.packages(rgl)
install.packages("rgl")
library("rgl", lib.loc="C:/Users/Jon/Documents/R/win-library/3.0")
library(rgl)
attach(mtcars)
plot3d(wt, disp, mpg, col="red", size = 3)
library(rattle)
rattle()
rattle()
rattle()
5600/30
5600/40
140/30
args("rnorm")
rnorm
swirl()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
mymatrix2 <- matrix(1:20, nrow=4, ncol=5)
mymatrix2 <- matrix(c(1:20), nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <= c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
x <- list(foo = 1:4, bar = 0.6)
x[1]
x[[1]]
x$bar
x[["bar"]]
x["bar"]
x <- list(foo = 1:4, bar = 0.6, a = "hello")
x[c(1, 3)]
x <- list(a = list(10, 12, 14), b = c(3.14, 2.81))
x[[c(1, 3)]]
x <- list(aardvark = 1:5)
x$a
x[["a"]]
x[["a", exact = "FALSE"]]
x <- c(1, 2, NA, 4, NA, 5)
x
x[!is.na(x)]
x <- c(1, 2, NA, 4, NA, 5)
y <- c("a", "b", NA, "d", "f", "NA")
good <- complete.cases(x, y)
good
?complete.cases
airquality[1:6, ]
good <- complete.cases(airquality)
good
airquality[good, ][1:6, ]
x <- matrix(1:4, 2, 2); y <- matrix(rep(10, 4), 2, 2)
x%*%y
120*8
120*8*1.5
y <- data.frame(a = 1, b = "a")
y
dput(y)
dput(y, file = "y.R")
getwd()
new.y
new.y <- dget("y.R")
new.y
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con, 20)
x
?markdown
â€¢    install.packages("slidify")
install.packages("slidify")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("devtools")
install.packages("KernSmooth")
library(KernSmooth)
library(devtools)
find_rtools()
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]), na.rm = TRUE)
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
interaction(f1, f2)
str(split(x, list(f1, f2)))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
apply(a, c(1, 2), mean)
rowMeans(a, dims = 2)
p <- Sys.time()
p
names(unclass(p))
p <- as.POSIXlt(Sys.time())
p
names(unclass(p))
prsec
p$sec
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
x <- 0
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?weekdays
setwd("C:\\Users\\Jon\\Documents\\Data_Scientist\\05_Reproducible_Research\\Assignment_01\\github\\RepData_PeerAssessment1\\")
activity  <- read.csv("activity.csv")
str(activity)
summary(as.POSIXlt(activity$date))
#activity$date <- as.POSIXlt(activity$date)
activity.daySum <- sapply(split(activity, activity$date), function(x) sum(x[, c("steps")], na.rm=TRUE))
activity.5minuteMean <- sapply(split(activity, activity$interval), function(x) mean(x[, c("steps")], na.rm=TRUE))
meanImputed <- rep.int(activity.5minuteMean, 61)
activityNew <- activity
activityNew$steps[is.na(activityNew$steps)] <- meanImputed[is.na(activityNew$steps)]
activityNew.daySum <- sapply(split(activityNew, activityNew$date), function(x) sum(x[, c("steps")], na.rm=TRUE))
temp <- weekdays(as.POSIXlt(activity$date))
temp
daytype <- if(weekdays(as.POSIXlt(activity$date)) in c("Saturday", "Sunday")){
"weekend"
}
else {
"weekday"
}
daytype <- if(weekdays(as.POSIXlt(activity$date)) == "Saturday"
|| weekdays(as.POSIXlt(activity$date)) == "Sunday"){
"weekend"
}
else {
"weekday"
}
weekend <- (weekdays(as.POSIXlt(activity$date)) %in% c("Saturday", "Sunday")
weekend <- (weekdays(as.POSIXlt(activity$date)) %in% c("Saturday", "Sunday"))
weekend <- (weekdays(as.POSIXlt(activity$date)) %in% c("Saturday", "Sunday"))
weekend
daytype <- factor(weekend, levels=recode, labels=names(recode))
recode <- c(weekend = 1, weekday = 0)
daytype <- factor(weekend, levels=recode, labels=names(recode))
(daytype <- factor(weekend, levels=recode, labels=names(recode)))
recode <- c(weekend = TRUE, weekday = FALSE)
(daytype <- factor(weekend, levels=recode, labels=names(recode)))
daytype <- factor(weekend, levels=recode, labels=names(recode))
?lattice
install.packages("lattice")
?lattice
demo(lattice)
types.plain <- c("p", "l", "o", "r", "g", "s", "S", "h", "a", "smooth")
types.horiz <- c("s", "S", "h", "a", "smooth")
horiz <- rep(c(FALSE, TRUE), c(length(types.plain), length(types.horiz)))
types <- c(types.plain, types.horiz)
x <- sample(seq(-10, 10, length.out = 15), 30, TRUE)
y <- x + 0.25 * (x + 1)^2 + rnorm(length(x), sd = 5)
xyplot(y ~ x | gl(1, length(types)),
xlab = "type",
ylab = list(c("horizontal=TRUE", "horizontal=FALSE"), y = c(1/6, 4/6)),
as.table = TRUE, layout = c(5, 3),
between = list(y = c(0, 1)),
strip = function(...) {
panel.fill(trellis.par.get("strip.background")$col[1])
type <- types[panel.number()]
grid::grid.text(label = sprintf('"%s"', type),
x = 0.5, y = 0.5)
grid::grid.rect()
},
scales = list(alternating = c(0, 2), tck = c(0, 0.7), draw = FALSE),
par.settings =
list(layout.widths = list(strip.left = c(1, 0, 0, 0, 0))),
panel = function(...) {
type <- types[panel.number()]
horizontal <- horiz[panel.number()]
panel.xyplot(...,
type = type,
horizontal = horizontal)
})[rep(1, length(types))]
library(lattice)
types.plain <- c("p", "l", "o", "r", "g", "s", "S", "h", "a", "smooth")
types.horiz <- c("s", "S", "h", "a", "smooth")
horiz <- rep(c(FALSE, TRUE), c(length(types.plain), length(types.horiz)))
types <- c(types.plain, types.horiz)
x <- sample(seq(-10, 10, length.out = 15), 30, TRUE)
y <- x + 0.25 * (x + 1)^2 + rnorm(length(x), sd = 5)
xyplot(y ~ x | gl(1, length(types)),
xlab = "type",
ylab = list(c("horizontal=TRUE", "horizontal=FALSE"), y = c(1/6, 4/6)),
as.table = TRUE, layout = c(5, 3),
between = list(y = c(0, 1)),
strip = function(...) {
panel.fill(trellis.par.get("strip.background")$col[1])
type <- types[panel.number()]
grid::grid.text(label = sprintf('"%s"', type),
x = 0.5, y = 0.5)
grid::grid.rect()
},
scales = list(alternating = c(0, 2), tck = c(0, 0.7), draw = FALSE),
par.settings =
list(layout.widths = list(strip.left = c(1, 0, 0, 0, 0))),
panel = function(...) {
type <- types[panel.number()]
horizontal <- horiz[panel.number()]
panel.xyplot(...,
type = type,
horizontal = horizontal)
})[rep(1, length(types))]
daytype.5minuteMean <- tapply(split(activityNew, activityNew$interval),
activityNew$daytype, function(x) mean(x[, c("steps")], na.rm=TRUE))
daytype.5minuteMean <- tapply(split(activityNew, activityNew$interval),
c("weekday" "weekend"), function(x) mean(x[, c("steps")], na.rm=TRUE))
daytype.5minuteMean <- tapply(split(activityNew, activityNew$interval),
INDEX = c("weekday" "weekend"), function(x) mean(x[, c("steps")], na.rm=TRUE))
daytype.5minuteMean <- tapply(split(activityNew, activityNew$interval),
INDEX = c("weekday", "weekend"), function(x) mean(x[, c("steps")], na.rm=TRUE))
?tapply
daytype.5minuteMean <- sapply(split(activityNew, list(activityNew$daytype, activityNew$interval), function(x) mean(x[, c("steps")], na.rm=TRUE))
daytype.5minuteMean
daytype.5minuteMean <- sapply(split(activityNew, list(activityNew$daytype, activityNew$interval), function(x) mean(x[, c("steps")], na.rm=TRUE)))
daytype.5minuteMean <- sapply(split(activityNew, list(activityNew$daytype, activityNew$interval)), function(x) mean(x[, c("steps")], na.rm=TRUE)))
daytype.5minuteMean <- sapply(split(activityNew, list(activityNew$daytype, activityNew$interval)), function(x) mean(x[, c("steps")], na.rm=TRUE))
split(activityNew, list(activityNew$daytype, activityNew$interval))
split(activityNew, list(activityNew$daytype, activityNew$interval))
list(activityNew$daytype, activityNew$interval)
names(activityNew$interval)
attributes(activityNew$interval)
attrib(activityNew$interval)
activityNew[activityNew$daytype == "weekend" ,]
activityNew[activityNew$daytype == "weekend"]
activityNew[,activityNew$daytype == "weekend"]
?aggregate
split(activityNew, list(activityNew$daytype, activityNew$interval))
weekend = subset(activityNew,daytype == "weekend")
weekday = subset(activityNew,daytype == "weekday")
weekend.5minuteMean <- sapply(split(weekend, weekend$interval), function(x) mean(x[, c("steps")], na.rm=TRUE))
weekday.5minuteMean <- sapply(split(weekday, weekday$interval), function(x) mean(x[, c("steps")], na.rm=TRUE))
weekend.5minuteMean
types.plain <- c("p", "l", "o", "r", "g", "s", "S", "h", "a", "smooth")
types.horiz <- c("s", "S", "h", "a", "smooth")
horiz <- rep(c(FALSE, TRUE), c(length(types.plain), length(types.horiz)))
types <- c(types.plain, types.horiz)
x <- sample(seq(-10, 10, length.out = 15), 30, TRUE)
y <- x + 0.25 * (x + 1)^2 + rnorm(length(x), sd = 5)
xyplot(x=names(activityNew.5minuteMean),
xlab = "type",
ylab = list(c("horizontal=TRUE", "horizontal=FALSE"), y = c(1/6, 4/6)),
as.table = TRUE, layout = c(5, 3),
between = list(y = c(0, 1)),
strip = function(...) {
panel.fill(trellis.par.get("strip.background")$col[1])
type <- types[panel.number()]
grid::grid.text(label = sprintf('"%s"', type),
x = 0.5, y = 0.5)
grid::grid.rect()
},
scales = list(alternating = c(0, 2), tck = c(0, 0.7), draw = FALSE),
par.settings =
list(layout.widths = list(strip.left = c(1, 0, 0, 0, 0))),
panel = function(...) {
type <- types[panel.number()]
horizontal <- horiz[panel.number()]
panel.xyplot(...,
type = type,
horizontal = horizontal)
})[rep(1, length(types))]
?xyplot
states <- data.frame(state.x77,
state.name = dimnames(state.x77)[[1]],
state.region = state.region)
xyplot(Murder ~ Population | state.region, data = states,
groups = state.name,
panel = function(x, y, subscripts, groups) {
ltext(x = x, y = y, labels = groups[subscripts], cex=1,
fontfamily = "HersheySans")
})
xyplot(Murder ~ Population | state.region, data = states,
panel = function(x, y, subscripts, groups) {
ltext(x = x, y = y, labels = groups[subscripts], cex=1,
fontfamily = "HersheySans")
})
xyplot(Murder ~ Population | state.region, data = states,
groups = state.name,
panel = function(x, y, subscripts, groups) {
ltext(x = x, y = y, labels = groups[subscripts], cex=1,
fontfamily = "HersheySans")
})
states
xyplot(Murder ~ Population | state.region, data = states,
panel = function(x, y, subscripts, groups) {
ltext(x = x, y = y, cex=1,
fontfamily = "HersheySans")
})
xyplot(Murder ~ Population | state.region, data = states,
type = "l",
panel = function(x, y, subscripts, groups) {
ltext(x = x, y = y, cex=1,
fontfamily = "HersheySans")
})
xyplot(Murder ~ Population | state.region, data = states,
type = "l",
panel = function(x, y, subscripts, groups) {
ltext(cex=1,
fontfamily = "HersheySans")
})
xyplot(Murder ~ Population | state.region, data = states,
type = "l"
})
xyplot(Murder ~ Population | state.region, data = states,
type = "l"
)
xyplot(Population ~ Murder | state.region, data = states,
type = "l"
)
xyplot(Population ~ Murder | state.region, data = states,
type = "l"
, layout=c(1,4)
)
weekend.5minuteMean
plotdata <- rbind(as.data.frame(interval = names(weekend.5minuteMean), steps = weekend.5minuteMean, daytype = "Weekend"),
as.data.frame(interval = names(weekday.5minuteMean), steps = weekday.5minuteMean, daytype = "Weekday"))
?rbind
as.data.frame(interval = names(weekend.5minuteMean), steps = weekend.5minuteMean, daytype = "Weekend")
?as.data.frame
plotdata <- rbind(data.frame(interval = names(weekend.5minuteMean), steps = weekend.5minuteMean, daytype = "Weekend"),
data.frame(interval = names(weekday.5minuteMean), steps = weekday.5minuteMean, daytype = "Weekday"))
plotdata
xyplot(steps ~ interval | daytype, data = plotdata,
type = "l", layout=c(1,2)
)
weekend.5minuteMean
str(weekend.5minuteMean)
str(plotdata)
str(activity)
plotdata <- rbind(data.frame(interval = as.integer(names(weekend.5minuteMean)), steps = weekend.5minuteMean, daytype = "Weekend"),
data.frame(interval = names(weekday.5minuteMean), steps = weekday.5minuteMean, daytype = "Weekday"))
plotdata <- rbind(data.frame(interval = as.integer(names(weekend.5minuteMean)), steps = weekend.5minuteMean, daytype = "Weekend"),
data.frame(interval = as.integer(names(weekday.5minuteMean)), steps = weekday.5minuteMean, daytype = "Weekday"))
xyplot(steps ~ interval | daytype, data = plotdata,
type = "l", layout=c(1,2)
)
weekendFlag <- (weekdays(as.POSIXlt(activity$date)) %in% c("Saturday", "Sunday"))
recode <- c(weekend = TRUE, weekday = FALSE)
activityNew$daytype <- factor(weekendFlag, levels=recode, labels=names(recode))
plotdata <- rbind(data.frame(interval = as.integer(names(weekend.5minuteMean)),
steps = weekend.5minuteMean, daytype = "Weekend"),
data.frame(interval = as.integer(names(weekday.5minuteMean)),
steps = weekday.5minuteMean, daytype = "Weekday"))
xyplot(steps ~ interval | daytype, data = plotdata
,type = "l", layout=c(1,2)
,xlab = "Interval", ylab = "Number of Steps"
, main = "Average Number of Steps by Weekend/Weekday")
head(activityNew)
activityNew[c(1:10, 290:300),]
activityNew[c(1:10, 600:610),]
activityNew[c(1:10, 1800:1810),]
activityNew[c(1:5, 1800:1805),]
